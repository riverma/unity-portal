# this workflow uses actions that are not certified by github.
# they are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# this workflow helps you trigger a sonarqube analysis of your code and populates
# github code scanning alerts with the vulnerabilities found.
# (this feature is available starting from sonarqube 9.7, developer edition and above)

# 1. make sure you add a valid github configuration to your sonarqube (administration > devops platforms > github)

# 2. import your project on sonarqube
#     * add your repository as a new project by clicking "create project" from your homepage.
#
# 3. select github actions as your ci and follow the tutorial
#     * a. generate a new token and add it to your github repository's secrets using the name SONAR_TOKEN
#          (on sonarqube, click on your avatar on top-right > my account > security or ask your administrator)
#
#     * b. copy/paste your sonarqube host url to your github repository's secrets using the name SONAR_HOST_URL
#
#     * c. copy/paste the project key into the args parameter below
#          (you'll find this information in sonarqube by following the tutorial or by clicking on project information at the top-right of your project's homepage)

# feel free to take a look at our documentation (https://docs.sonarqube.org/latest/analysis/github-integration/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/sq/10)

name: SonarQube analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read  # allows sonarqube to decorate prs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name: set up java 17
        # set up java 17 so that the sonar scanner runs with the required java version
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      - name: analyze with sonarqube
        # run the sonarqube scan action to analyze the code
        uses: SonarSource/sonarqube-scan-action@7295e71c9583053f5bf40e9d4068a0c974603ec8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # needed to get pr information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}      # token generated on sonarqube, add this to your secrets
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # url of your sonarqube instance
        with:
          args: |
            -Dsonar.projectKey=riverma_unity-portal
            # add other sonar scanner arguments as needed
